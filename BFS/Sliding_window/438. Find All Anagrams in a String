438. Find All Anagrams in a String
## Description:
Given a string s and a non-empty string p, find all the start indices of p's anagrams in s.

Strings consists of lowercase English letters only and the length of both strings s and p will not be larger than 20,100.

The order of output does not matter.

Example 1:

Input:
s: "cbaebabacd" p: "abc"

Output:
[0, 6]

Reference:
http://blog.csdn.net/yy254117440/article/details/53025142

Analysis:
首先，先构造一个map，对于p中的每个字符char，都有map[char]++。 
然后，初始化一个长度为0的窗口，left = 0，right = 0。第一步先扩展窗口，也就是在right的右边界上做文章。每次right读到一个字符char，当map[char]的值大于等于1时, 表示p中有这个字符，都有map[char]–。
同时我们可以取一个变量count，值为p中所有字符的总数。每次有一个p中字符进入窗口，则count–。这样，当count == 0的时候，表明我们的窗口中包含了p中的全部字符，得到一个结果。 
当窗口包含一个结果以后，为了进一步遍历，我们需要缩小窗口使窗口不再包含全部的p，同样，如果map[char]>=0，表明一个在p中的字符就要移除窗口，那么count ++，以此类推。 
## Code:
public class Solution {
    /*
     * @param s: a string
     * @param p: a string
     * @return: a list of index
     */
    public List<Integer> findAnagrams(String s, String p) {
        List<Integer> result = new ArrayList<Integer>();
        if(s == null){
            return result;
        }
        // sliding window
        int[] map = new int[256];
        //initialize map
        for(char c: p.toCharArray()){
            map[c]++;
        }
        // iterate s using sliding window
        int start = 0, end = 0, count = p.length();
        char[] ss = s.toCharArray();
        while(end < s.length()){
           if(map[ss[end++]]-- >=1){
               count --;
           }
           if(count == 0){
               result.add(start);
           }
           //slide back the original value for next sliding
           if(end - start == p.length() && map[ss[start++]]++ >= 0){
               count++;
           }
        }
        return result;    
      }
}